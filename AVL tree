
import java.util.ArrayList;


  class AVL { 
      
    public class Node {
         int value;
         Node left;
         Node right;
         int height;
         int balanceFactor;
    
         Node(int val) {
            value = val;
        }
    
         Node(int val, Node l, Node r) {
            value = val;
            left = l;
            right = r;
        }
    
       
    } ;
    
    private Node root = null;
    private int size = 0;

    private enum direction {
        LEFT, RIGHT
    }

    public void insert(int value) {
         if (size == 0) {
            this.root = new Node(value);
        } else {
            int mid = this.size / 2 + 1;

            // Two arrays to keep track
           ArrayList<Node> p = new ArrayList<Node>();
           ArrayList<direction> children = new ArrayList<direction>();

            int parentCount = 0;
            //counter to use while loop rather than for loop
            Node current = root;

            // Traverse the nodes to find where to insert
            while (current != null) {

                if (value == current.value) {
                    return; // Edge case if value is already there
                } else {
                    
                    p.add(parentCount, current);
                    // if the value you want to insert is less than nodes current value
                    if (current.value > value) {
                        current = current.left;
                        children.add(parentCount, direction.LEFT);
                    } else {
                        current = current.right;
                      children.add(parentCount, direction.RIGHT);
                    }
                    parentCount++; //increment to counter
                }
            }

            // Add node at location found
            current = p.get(parentCount - 1);
            if (children.get(parentCount - 1) == direction.LEFT) {
                current.left = new Node(value);
            } else {
                current.right = new Node(value);
            }

            // Iterate back through parents, updating fields and balancing
            for (int i = parentCount - 1; i > 0; i--) {
                //current = parents[i];
                current = p.get(i);
                this.updateFactorAndHeight(current);
                this.rebalance(current, p.get(i - 1), children.get(i - 1));
            }

            // Edge case root
            this.updateFactorAndHeight(this.root);
            this.rebalance(this.root, null, null);
        }
        //update size of tree
        this.size++;
    }

    private void updateFactorAndHeight(Node target) {
        // Get children
        Node left = target.left;
        Node right = target.right;

        // Calculate balance factor [height(left) - height(right)]
        int numLeft = left == null ? -1 : left.height;
        int numRight = right == null ? -1 : right.height;
        target.balanceFactor = numLeft - numRight;

        // Calculate height
        numLeft = left == null ? -1 : left.height;
        numRight = right == null ? -1 : right.height;
        target.height = Math.max(numLeft, numRight) + 1;
    }

    private void rebalance(Node target, Node parent, direction type) {
        int balanceFactor = target.balanceFactor;

        if (balanceFactor > 1) {
            // Subtree is LEFT heavy
            if (target.left.balanceFactor < 0) {
                // Left rotation of left child required before right rotation
                // (L-R)
                this.rotateLeft(target.left, target, direction.LEFT);
            }

            // Right rotation
            this.rotateRight(target, parent, type);
        } else if (balanceFactor < -1) {
            // Subtree is RIGHT heavy

            if (target.right.balanceFactor > 0) {
                // Right rotation of right child required before left rotation
                // (R-L)
                rotateRight(target.right, target, direction.RIGHT);
            }

            // Left rotation
            this.rotateLeft(target, parent, type);
        }
    }

   
    private void rotateRight(Node target, Node parent, direction type) {
        // Get the node to pivot around
        Node pivot = target.left;

        // Ensure nothing stupid happens
        if (pivot == null) {
            return;
        }

        // Right rotation
        target.left = pivot.right;
        pivot.right = target;

        // Update parent node connection
        if (parent == null) {
            this.root = pivot;
        } else if (type == direction.LEFT) {
            parent.left = pivot;
        } else {
            parent.right = pivot;
        }

        // Update 'target' then 'pivot' (order important)
        this.updateFactorAndHeight(target);
        this.updateFactorAndHeight(pivot);
    }

    
    private void rotateLeft(Node target, Node parent, direction type) {
        Node pivot = target.right;

        // Ensure nothing stupid happens
        if (pivot == null) {
            return;
        }

        // Left rotation
        target.right = pivot.left;
        pivot.left = target;

        // Update parent node connection
        if (parent == null) {
            this.root = pivot;
        } else if (type == direction.LEFT) {
            parent.left = pivot;
        } else {
            parent.right = pivot;
        }

        // Update 'target' then 'pivot' (order important)
        this.updateFactorAndHeight(target);
        this.updateFactorAndHeight(pivot);
    }

    public void deleteIter(int value) {

        Node data = new Node(value);
         int mid = this.size / 2 + 1;        

         // Two arrays to keep track
         ArrayList<Node> p = new ArrayList<Node>();
         ArrayList<direction> children = new ArrayList<direction>();
 
         int parentCount = 0;
         Node current = root;
        
 
         do {
             
             p.add(parentCount, current);
             if (value < current.value) {
                 current = current.left;
               
                 children.add(parentCount, direction.LEFT);
             } else {
                 current = current.right;
                 //childTypes[parentCount] = direction.RIGHT;
                 children.add(parentCount, direction.RIGHT);
             }
             parentCount++;
         } while (current != null && value != current.value);
 
 
         // Get children of deleted node
         Node left = current.left;
         Node right = current.right;
 
         // Handle 3 edge cases
         //  no children
         if (left == null && right == null) {
             if (parentCount > 0) {
                 // Node to delete is a leaf
                 Node parent = p.get(parentCount - 1);
                 if (children.get(parentCount - 1) == direction.LEFT) {
                     parent.left = null;
                 } else {
                     parent.right = null;
                 }
             } else {
                 // The node to delete is the root
                 this.root = null;
             }
         } else if (left == null || right == null) {
             // one child
             // Retrieve the lone child
             Node loneChild = left == null ? right : left;
             if (parentCount > 1) {
                 Node parent = p.get(parentCount - 1);
                 if (children.get(parentCount - 2) == direction.LEFT) {
                     parent.left = loneChild;
                 } else {
                     parent.right = loneChild;
                 }
             } else {
                 this.root = loneChild;
             }
         } else {
             // two children
 
             // Find successor
             Node successor = right;
             Node successorParent = current;
             direction type = direction.RIGHT;
             while (successor.left != null) {
                 successorParent = successor;
                 p.set(parentCount, successorParent);
                 parentCount++;
                 successor = successor.left;
                 type = direction.LEFT;
             }
 
             // Replace deleted data with successor data
             current = successor;
 
             // Del successor
             if (type == direction.RIGHT) {
                 successorParent.right = null;
             } else {
                 successorParent.left = null;
             }
         }
 
         // Update and rebalnce
         for (int i = parentCount - 1; i > 0; i--) {
             current = p.get(i);
             this.updateFactorAndHeight(current);
             this.rebalance(current, p.get(i - 1), children.get(i - 1));
         }
 
         // Edge case rebalnce
         if (parentCount > 0) {
             this.updateFactorAndHeight(this.root);
             this.rebalance(this.root, null, null);
         }
 
         // tree size -1
         size--;
 
     }
 
     public Node findMinIter(Node root) {
        Node current = root;
        Node parent = null;
        
        while(current != null) {
            parent = current;
            current = current.left;
        }
        return parent;
        
    }
    
    public Node findMaxIter(Node root) {
        Node current = root;
        Node parent = null;
        
        while(current != null) {
            parent = current;
            current = current.right;
        }
        return parent;
        
    }
    
    Node findNext(Node root, int value) {
        Node parent = root;
        Node child = root;
        //if its empty
        if(root == null) {
            return root;
        }
        //Edge case: the root of the tree is value you want to findnext for
        // find the key value im looking for then find the smallest value of the right subtree 
        do{
            if(parent.value == value){
                child = child.right;
            }else{
                if(child.value > value){
                    child = child.left;
                }else {
                    child = parent;
                    System.out.println("the parent is bigger");
                }
            }
            System.out.println(child.value);
        }
        while(child != null && child.value != value);
            
        
        
        // return null if nothing is bigger/next
        return child;
    }

    public int size() {
        return this.size;
    }

    //just a test to print
    void preOrder(Node node) { 
        if (node != null) { 
            System.out.print(node.value + " "); 
            preOrder(node.left); 
            preOrder(node.right); 
        } 
    } 



    public int height() {
        return this.root.height;
    }
	
	 
    public static void main(String[]args){
        AVL tree = new AVL();
        tree.insert(10);
        tree.insert(20);
        tree.insert(30);
        tree.insert(40);
        tree.insert(50);
        tree.insert(25);
       tree.preOrder(tree.root);
       tree.deleteIter(25);
       System.out.println();
       tree.preOrder(tree.root);
       System.out.println();
       System.out.println("Min: " + tree.findMinIter(tree.root).value);
       System.out.println("Max: " + tree.findMaxIter(tree.root).value);
       tree.findNext(tree.root, 10);
    }
}
